% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sql.R
\name{saveDF}
\alias{saveDF}
\title{Save
Save a dataframe to a database, storing it in decomposed form:
\itemize{
\item a named table with a dumbed-down version of the dataframe, where logicals are
coerced to integers, and factors are coerced to strings.
\item a metadata table called \verb{__types}, with the information necessary to
recover the logicals and factors in the original dataframe.
Additional arguments are passed to the database write call for the data table.
The dataframe can be retrieved from the database using \code{\link[=loadDF]{loadDF()}}.
}}
\usage{
saveDF(con, df, name, overwrite = TRUE, ...)
}
\arguments{
\item{con}{An SQL database connection (generated via \code{\link[DBI:dbConnect]{DBI::dbConnect()}}).}

\item{df}{The dataframe to save.}

\item{name}{The table name to use in the database.}

\item{overwrite}{Should the dataframe overwrite the existing content under that table name?}

\item{...}{Additional arguments to pass to the database write call for the dataframe.}
}
\description{
Save
Save a dataframe to a database, storing it in decomposed form:
\itemize{
\item a named table with a dumbed-down version of the dataframe, where logicals are
coerced to integers, and factors are coerced to strings.
\item a metadata table called \verb{__types}, with the information necessary to
recover the logicals and factors in the original dataframe.
Additional arguments are passed to the database write call for the data table.
The dataframe can be retrieved from the database using \code{\link[=loadDF]{loadDF()}}.
}
}
\examples{
con <- DBI::dbConnect(RSQLite::SQLite(), ":memory:")

df <- tibble::tibble(
  a = factor(c("a", "a", "b"), levels = c("a", "b"), ordered = TRUE),
  b = c(TRUE, TRUE, FALSE),
  c = c(1,2,3)
 )

saveDF(con, df, "test_1")

loadDF(con, "test_1")

DBI::dbDisconnect(con)
}
\seealso{
Pure functions to decompose/recompose dataframes: \code{\link[=decomposeDF]{decomposeDF()}} \code{\link[=recomposeDF]{recomposeDF()}}
}
